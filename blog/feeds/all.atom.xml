<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>協同產品設計實習</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-06-07T06:04:31+08:00</updated><entry><title>2024 Spring 課程 w15</title><link href="./2024-Spring-w15-blog-tutorial-40923116.html" rel="alternate"></link><published>2024-05-31T14:00:00+08:00</published><updated>2024-06-07T06:04:21+08:00</updated><author><name>40923116</name></author><id>tag:None,2024-05-31:./2024-Spring-w15-blog-tutorial-40923116.html</id><summary type="html">&lt;p&gt;cd2023 足球機器人網際場景模擬&lt;/p&gt;
</summary><content type="html">&lt;p&gt;cd2023 足球機器人網際場景模擬&lt;/p&gt;


&lt;h1&gt;cd2023 足球機器人網際場景模擬&lt;/h1&gt;
&lt;p&gt;從 https://github.com/mdecd2023/2a3-pj3ag4 下載當時所完成的倉儲資料, 參考網際手足球機器人場景設計專案報告, 由我們擔任場景競技球員, 利用鍵盤操控足球機器人.&lt;/p&gt;
&lt;p&gt;操作影片網址:
https://youtu.be/2slNuSwqu60?si=qUF24PNC6jquQmBE&lt;/p&gt;
&lt;hr&gt;</content><category term="w15-40923116"></category><category term="Python 解譯系統"></category></entry><entry><title>2024 Spring 課程 w14</title><link href="./2024-Spring-w14-blog-tutorial-40923116.html" rel="alternate"></link><published>2024-05-24T14:00:00+08:00</published><updated>2024-06-07T06:04:31+08:00</updated><author><name>40923116</name></author><id>tag:None,2024-05-24:./2024-Spring-w14-blog-tutorial-40923116.html</id><summary type="html">&lt;p&gt;NX 1872 繪製鋼球平衡台所需的零組件&lt;/p&gt;
</summary><content type="html">&lt;p&gt;NX 1872 繪製鋼球平衡台所需的零組件&lt;/p&gt;


&lt;h1&gt;NX 1872 繪製鋼球平衡台所需的零組件&lt;/h1&gt;
&lt;p&gt;利用 Siemens NX1872.7z 執行零組件繪圖, 完成後請將過程影片放入個人與分組網站中.&lt;/p&gt;
&lt;p&gt;影片網址:
https://youtu.be/3dpD9yNZ7IA?si=Yksuqsz6ZDMOk11p
https://youtu.be/LInhkkFguaM?si=5plGPS2wspyzWYST&lt;/p&gt;
&lt;hr&gt;</content><category term="w14-40923116"></category><category term="Python 解譯系統"></category></entry><entry><title>2024 Spring 課程 w13</title><link href="./2024-Spring-w13-blog-tutorial-40923116.html" rel="alternate"></link><published>2024-05-17T14:00:00+08:00</published><updated>2024-05-17T06:29:34+08:00</updated><author><name>40923116</name></author><id>tag:None,2024-05-17:./2024-Spring-w13-blog-tutorial-40923116.html</id><summary type="html">&lt;p&gt;利用 gen_py3123_portable.py 在上列舊版的 Python 可攜環境執行, 可在 C:\tmp 建立最基本的可攜 Python3123 程式目錄.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;利用 gen_py3123_portable.py 在上列舊版的 Python 可攜環境執行, 可在 C:\tmp 建立最基本的可攜 Python3123 程式目錄.&lt;/p&gt;


&lt;h1&gt;Python 解譯系統&lt;/h1&gt;
&lt;p&gt;利用 gen_py3123_portable.py 在上列舊版的 Python 可攜環境執行, 可在 C:\tmp 建立最基本的可攜 Python3123 程式目錄.&lt;/p&gt;
&lt;hr&gt;</content><category term="w13-40923116"></category><category term="Python 解譯系統"></category></entry><entry><title>2024 Spring 課程 w12</title><link href="./2024-Spring-w12-blog-tutorial-40923116.html" rel="alternate"></link><published>2024-05-10T14:00:00+08:00</published><updated>2024-05-10T06:18:31+08:00</updated><author><name>40923116</name></author><id>tag:None,2024-05-10:./2024-Spring-w12-blog-tutorial-40923116.html</id><summary type="html">&lt;p&gt;利用 NXOpen 程式分別執行建立 block 與挖孔 (透過錄製 Journal 程式產生)後, 請設法將兩個程式合併為一個程式, 可以直接完成建立一個 block 並在其特定面上挖孔.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;利用 NXOpen 程式分別執行建立 block 與挖孔 (透過錄製 Journal 程式產生)後, 請設法將兩個程式合併為一個程式, 可以直接完成建立一個 block 並在其特定面上挖孔.&lt;/p&gt;


&lt;h1&gt;NXOpen 實習項目&lt;/h1&gt;
&lt;p&gt;以下影片說明如何設定 Siemens NX Journal 存檔格式, 並且利用 NXOpen 程式分別執行建立 block 與挖孔 (透過錄製 Journal 程式產生)後, 請設法將兩個程式合併為一個程式, 可以直接完成建立一個 block 並在其特定面上挖孔.&lt;/p&gt;
&lt;hr&gt;</content><category term="w12-40923116"></category><category term="NXOpen 實習項目"></category></entry><entry><title>2024 Spring 課程 w11</title><link href="./2024-Spring-w11-blog-tutorial-40923116.html" rel="alternate"></link><published>2024-05-03T14:00:00+08:00</published><updated>2024-05-10T06:18:44+08:00</updated><author><name>40923116</name></author><id>tag:None,2024-05-03:./2024-Spring-w11-blog-tutorial-40923116.html</id><summary type="html">&lt;p&gt;根據 Solvespace_model _2d_for_cd2024_w6.7z 零組件尺寸, 利用 Siemens NX1872.7z (需要登入 @nfu.edu.tw, cd2024 採用電腦安裝的 NX1872 或隨身碟中的 NX1872) 執行零組件繪圖, 完成後請將過程影片放入個人與分組網站中.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;根據 Solvespace_model _2d_for_cd2024_w6.7z 零組件尺寸, 利用 Siemens NX1872.7z (需要登入 @nfu.edu.tw, cd2024 採用電腦安裝的 NX1872 或隨身碟中的 NX1872) 執行零組件繪圖, 完成後請將過程影片放入個人與分組網站中.&lt;/p&gt;


&lt;h1&gt;鋼球平衡台自動控制系統模擬&lt;/h1&gt;
&lt;p&gt;請根據 Solvespace_model _2d_for_cd2024_w6.7z 零組件尺寸, 利用 Siemens NX1872.7z (需要登入 @nfu.edu.tw, cd2024 採用電腦安裝的 NX1872 或隨身碟中的 NX1872) 執行零組件繪圖, 完成後請將過程影片放入個人與分組網站中.&lt;/p&gt;
&lt;hr&gt;</content><category term="w11-40923116"></category><category term="鋼球平衡台自動控制系統模擬"></category></entry><entry><title>2024 Spring 課程 w10</title><link href="./2024-Spring-w10-blog-tutorial-40923116.html" rel="alternate"></link><published>2024-04-26T14:00:00+08:00</published><updated>2024-05-10T06:21:26+08:00</updated><author><name>40923116</name></author><id>tag:None,2024-04-26:./2024-Spring-w10-blog-tutorial-40923116.html</id><summary type="html">&lt;p&gt;請各班各組根據 2a_cd2024_midterm.csv&lt;/p&gt;
</summary><content type="html">&lt;p&gt;請各班各組根據 2a_cd2024_midterm.csv&lt;/p&gt;


&lt;h1&gt;協同資料處理&lt;/h1&gt;
&lt;p&gt;請各班各組根據 2a_cd2024_midterm.csv, 以及 2b_cd2024_midterm.csv 中的學號、Github 帳號與組別, 設法在各組員與分組網站中, 列出各學員的 cd2024 倉儲、網站, 以及各班各組的期中報告倉儲與網站連結.&lt;/p&gt;
&lt;hr&gt;</content><category term="w10-40923116"></category><category term="協同資料處理"></category></entry><entry><title>2024 Spring 課程 w9</title><link href="./2024-Spring-w9-blog-tutorial-40923116.html" rel="alternate"></link><published>2024-04-19T14:00:00+08:00</published><updated>2024-05-10T06:21:16+08:00</updated><author><name>40923116</name></author><id>tag:None,2024-04-19:./2024-Spring-w9-blog-tutorial-40923116.html</id><summary type="html">&lt;p&gt;請下載 cd2024_ball_balancing_platform_control_ref.7z&lt;/p&gt;
</summary><content type="html">&lt;p&gt;請下載 cd2024_ball_balancing_platform_control_ref.7z&lt;/p&gt;


&lt;h1&gt;鋼球平衡台 PID 控制與模擬&lt;/h1&gt;
&lt;p&gt;請下載 cd2024_ball_balancing_platform_control_ref.7z, 閱讀後請將摘要內容放入個人與分組網誌中.&lt;/p&gt;
&lt;hr&gt;</content><category term="w9-40923116"></category><category term="鋼球平衡台 PID 控制與模擬"></category></entry><entry><title>2024 Spring 課程 w8</title><link href="./2024-Spring-w8-blog-tutorial-40923116.html" rel="alternate"></link><published>2024-04-12T14:00:00+08:00</published><updated>2024-05-10T06:11:47+08:00</updated><author><name>40923116</name></author><id>tag:None,2024-04-12:./2024-Spring-w8-blog-tutorial-40923116.html</id><summary type="html">&lt;p&gt;內容管理系統.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;內容管理系統.&lt;/p&gt;


&lt;h1&gt;內容管理系統&lt;/h1&gt;
&lt;p&gt;協同產品設計實習課程使用網際內容管理系統, 採 Github Classroom 建立分組倉儲, 並由學員自行利用 cmsimde_site 作為 Github 倉儲的引擎目錄, 利用 Python 執行網頁編輯. 之後再轉檔為靜態網頁, 以便利用 Github Pages 所提供的 WWW 伺服器呈現協同產品設計過程的相關多媒體內容.&lt;/p&gt;
&lt;p&gt;除了章節式的網站外, cmsimde_site 還額外利用 Pelican 管理使用者所建立的網誌, 以及利用 Reveal 管理使用者所建立的網際簡報.&lt;/p&gt;
&lt;p&gt;在使用者每週的內容管理過程, 由於必須採用 Python 執行網頁編輯, cd2024 課程採用了四種不同的方法進行, 其中包括 Replit、Codespaces、Gitpod 以及 localhost. 由於前三者屬於雲端作業, 各有不同的使用規定與免費使用權限, 對於多人協同的產品設計團隊而言, 可以根據各自的喜好與環境選擇合用的網頁編輯工具, 且在多方了解下也可透過實際使用發展中的雲端 IDE 環境, 一窺未來可能的 AI 導引前景.&lt;/p&gt;
&lt;p&gt;從協同設計的架構上, 個人與分組的倉儲中, 總共設計了以下幾種內容的協同模式:&lt;/p&gt;
&lt;p&gt;分組網站內容的協同 - 其中包括章節式的網站內容與網誌內容, 可以透過 Python 程式方法整合各學員子模組中的 config/content.htm 以及 markdown/*.md 檔案至分組網站中
分組報告內容的協同 - 採用的是 Github Actions 與近端 MikTeX 中的 xelatex 將 .tex 轉為 pdf 的整合過程
分組產品設計的 PLM 協同 - 採用的是 Odoo PLM 模組, 讓各分組可以將網站內容、報告內容視為產品, 從協同架構的訂定作為起點, 完成資料展示作為終點, 逐一將過程的協調、派任與執行方法納入 PLM 系統管理
分組零組件設計的協同 - 分別採用 Solvespace 作為鋼球平衡台範例, 讓學員使用 Siemens NX 1872 進行協同零組件繪圖設計, 並將各零件的 .prt 檔案納入各學員的倉儲進行組立, 以便找出最佳的設計分工以及零組件轉檔流程
分組模擬場景設計的協同 - 當各分組順利完成鋼球平衡台的零組件轉檔後, 一旦進入 CoppeliaSim 場景後, 必須逐一配置感測器 (Sensors)、致動器 (Actuators) 以及 ZMQ RemoteAPI Python程式, 主要探討如何將此一場景模擬過程在 CoppeliaSim XML 檔案格式與 Siemens NXOpen Python 零件程式檔案間, 找到合用或最佳的協同產品設計模式.
分組專案簡報設計的協同 - 在上述各產品設計階段所累積的各種資料, 該如何有效整合到專案完成後必須進行的網際簡報中.
分組網站內容的協同
各分組網站內容的協同包含:&lt;/p&gt;
&lt;p&gt;章節式網站內容
週記式網誌內容
網際簡報內容
其中首先要求各組員必須每週在 cd2024 倉儲中的 markdown 目錄編寫 markdown 網誌文章, 再經由 Pelican 轉檔至 blog 目錄中的超文件網誌. 由於 Pelican 採用 Python 檔案進行設定, 因此可以在轉檔的過程中, 將各子目錄中的組員倉儲網誌集合到分組倉儲中的 combined_markdown 目錄之後, 再指定將網誌超文件轉至各分組倉儲的 blog 目錄.&lt;/p&gt;
&lt;p&gt;由於分組網誌內容協同時, 所有組員所編寫的 markdown 文章必須存入 combined_markdown 目錄, 因此 markdown 網誌文章檔案的命名不可重複, 且各網誌文章的 Slug 字串將會被當作用來命名轉檔後的超文件檔案名稱, 因此也不能重複.&lt;/p&gt;
&lt;p&gt;至於當各組員採用 Replit 維護個人倉儲內容時, 可以直接從 Replit Connect 至 Github 取得維護倉儲的權限, 旦卻無法直接用管理分組倉儲, 因為各組員雖然擁有管理分組倉儲的權限, 但是無法在 Replit 中以免費的組員帳號管理 Github Classroom 所取得的分組倉儲. 而必須動態納入針對分組倉儲的 OpenSSH 管理權限.&lt;/p&gt;
&lt;hr&gt;</content><category term="w8-40923116"></category><category term="內容管理系統"></category></entry><entry><title>2024 Spring 課程 w7</title><link href="./2024-Spring-w7-blog-tutorial-40923116.html" rel="alternate"></link><published>2024-04-05T14:00:00+08:00</published><updated>2024-05-10T06:21:05+08:00</updated><author><name>40923116</name></author><id>tag:None,2024-04-05:./2024-Spring-w7-blog-tutorial-40923116.html</id><summary type="html">&lt;p&gt;其中首先要求各組員必須每週在 cd2024 倉儲中的 markdown 目錄編寫 markdown 網誌文章&lt;/p&gt;
</summary><content type="html">&lt;p&gt;其中首先要求各組員必須每週在 cd2024 倉儲中的 markdown 目錄編寫 markdown 網誌文章&lt;/p&gt;


&lt;h1&gt;分組網站內容的協同&lt;/h1&gt;
&lt;p&gt;其中首先要求各組員必須每週在 cd2024 倉儲中的 markdown 目錄編寫 markdown 網誌文章, 再經由 Pelican 轉檔至 blog 目錄中的超文件網誌. 由於 Pelican 採用 Python 檔案進行設定, 因此可以在轉檔的過程中, 將各子目錄中的組員倉儲網誌集合到分組倉儲中的 combined_markdown 目錄之後, 再指定將網誌超文件轉至各分組倉儲的 blog 目錄.&lt;/p&gt;
&lt;hr&gt;</content><category term="w7-40923116"></category><category term="分組網站內容的協同"></category></entry><entry><title>2024 Spring 課程 w6</title><link href="./2024-Spring-w6-blog-tutorial-40923116.html" rel="alternate"></link><published>2024-03-29T14:00:00+08:00</published><updated>2024-05-10T06:11:42+08:00</updated><author><name>40923116</name></author><id>tag:None,2024-03-29:./2024-Spring-w6-blog-tutorial-40923116.html</id><summary type="html">&lt;p&gt;Github Actions 帶有子模組的 main.yml 設定.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Github Actions 帶有子模組的 main.yml 設定.&lt;/p&gt;


&lt;h1&gt;Github Actions 帶有子模組的 main.yml 設定&lt;/h1&gt;
&lt;p&gt;Close
Menu&lt;/p&gt;
&lt;p&gt;About
Archives
Categories
Tags
 Home
 Menu
協同產品設計實習2a-6
Kmol | Fri 29 March 2024
| Updated on Sat 30 March 2024
Search
協同產品設計實習的第六週, 說明協同 NX 零組件繪圖以及 CoppeliaSim 場景模擬相關檔案格式.&lt;/p&gt;
&lt;p&gt;註記: 以下教學影片雖經過除噪音處理, 但效果仍不好, 可能之後必須重新錄影.&lt;/p&gt;
&lt;hr&gt;</content><category term="w6-40923116"></category><category term="Github Actions 帶有子模組的 main.yml 設定"></category></entry><entry><title>2024 Spring 課程 w5</title><link href="./2024-Spring-w5-blog-tutorial-40923116.html" rel="alternate"></link><published>2024-03-22T14:00:00+08:00</published><updated>2024-05-10T06:11:40+08:00</updated><author><name>40923116</name></author><id>tag:None,2024-03-22:./2024-Spring-w5-blog-tutorial-40923116.html</id><summary type="html">&lt;p&gt;將組員的個人倉儲設為分組倉儲子模組.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;將組員的個人倉儲設為分組倉儲子模組.&lt;/p&gt;


&lt;h1&gt;將組員的個人倉儲設為分組倉儲子模組&lt;/h1&gt;
&lt;p&gt;將組員的個人倉儲設為分組倉儲子模組。&lt;/p&gt;
&lt;hr&gt;</content><category term="w5-40923116"></category><category term="將組員的個人倉儲設為分組倉儲子模組"></category></entry><entry><title>2024 Spring 課程 w4</title><link href="./2024-Spring-w4-blog-tutorial-40923116.html" rel="alternate"></link><published>2024-03-15T14:00:00+08:00</published><updated>2024-05-10T06:11:37+08:00</updated><author><name>40923116</name></author><id>tag:None,2024-03-15:./2024-Spring-w4-blog-tutorial-40923116.html</id><summary type="html">&lt;p&gt;製作及統整上課影片.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;製作及統整上課影片.&lt;/p&gt;


&lt;h1&gt;利用capcut去製作上課影片&lt;/h1&gt;
&lt;p&gt;利用剪接軟體capcut去製作及統整上課影片，並上字幕。&lt;/p&gt;
&lt;hr&gt;</content><category term="w4-40923116"></category><category term="上課影片製作及上字幕"></category></entry><entry><title>2024 Spring 課程 w3</title><link href="./2024-Spring-w3-blog-tutorial-40923116.html" rel="alternate"></link><published>2024-03-08T14:00:00+08:00</published><updated>2024-05-10T06:04:50+08:00</updated><author><name>40923116</name></author><id>tag:None,2024-03-08:./2024-Spring-w3-blog-tutorial-40923116.html</id><summary type="html">&lt;p&gt;利用 codespaces 維護分組網站.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;利用 codespaces 維護分組網站.&lt;/p&gt;


&lt;h1&gt;利用 codespaces 維護分組網站&lt;/h1&gt;
&lt;p&gt;分組利用github去試推與test到分組網站&lt;/p&gt;
&lt;p&gt;學習到協同不一樣的技能&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="image.png"&gt;&lt;/p&gt;
&lt;hr&gt;</content><category term="w3-40923116"></category><category term="網誌編寫"></category><category term="codespaces"></category></entry><entry><title>2024 Spring 課程 w2</title><link href="./2024-Spring-w2-blog-tutorial-40923116.html" rel="alternate"></link><published>2024-03-01T14:00:00+08:00</published><updated>2024-05-10T06:04:39+08:00</updated><author><name>40923116</name></author><id>tag:None,2024-03-01:./2024-Spring-w2-blog-tutorial-40923116.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w2-40923116"></category><category term="網誌編寫"></category><category term="pelican"></category></entry></feed>
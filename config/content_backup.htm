<h1>About</h1>
<p>網頁: <a class="Link--inTextBlock" href="https://40923116.github.io/cd2024/">https://40923116.github.io/cd2024/</a></p>
<p>網誌: <a href="https://40923116.github.io/cd2024/blog">https://40923116.github.io/cd2024/blog</a></p>
<p>簡報: <a href="https://40923116.github.io/cd2024/reveal">https://40923116.github.io/cd2024/reveal</a></p>
<p>倉儲: <a href="https://github.com/40923116/cd2024">https://github.com/40923116/cd2024</a></p>
<p></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<p></p>
<h1>自評分數:65</h1>
<p></p>
<h1>統整影片</h1>
<p>期中統整影片:</p>
<p><a href="https://youtu.be/HumKHWamrDs?si=ODdMebxoweB6RBEK">https://youtu.be/HumKHWamrDs?si=ODdMebxoweB6RBEK</a></p>
<p>課程分組分配上字幕影片:</p>
<p><a href="https://www.youtube.com/watch?v=N798hn7KOqQ">https://www.youtube.com/watch?v=N798hn7KOqQ</a></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<h1>英翻中</h1>
<p><a href="https://drive.google.com/file/d/1LsdxgrLyk4KoZ03YpcpOYPQ44dsAvDUt/view">PDF</a></p>
<p></p>
<p><span>21-30</span></p>
<p><span> </span></p>
<p>增材製造已成為超彈性生產的絕佳工具。這種持續改進的心態，尤其是在原型設計和迭代設計方面，是現代工業中非常重要的精益理念的標誌。</p>
<p>如前一節所述，在本案例研究中，考慮了由虛構公司創建新產品及其生產過程。該產品由一個塑膠小型電腦機殼組成，由<span> 3 </span>個不同的零件組成（圖<span> 13</span>），預計將考慮增材製造和<span> CNC </span>銑削的組合來設計和製作原型，以實現塑膠射出成型生產。</p>
<p><span> </span></p>
<p><span>4.1.1. </span>零件<span> A</span></p>
<p>零件<span> A</span>（圖<span> 14</span>）是電腦機殼的核心結構。它預計將包含小型電腦正常運作所需的所有零件。為此，選擇了原材料<span> A </span>為丙烯腈<span>-</span>丁二烯<span>-</span>苯乙烯<span> (ABS)</span>，這是一種不透明的熱塑性聚合物和工程級塑膠。它通常用於生產電子零件，例如電話適配器、鍵盤按鍵和牆上插座塑膠護罩。</p>
<p><span> </span></p>
<p>選擇這種材料的主要原因是其韌性、良好的尺寸穩定性（冷卻後抵抗尺寸變化的能力）、高抗衝擊性和表面硬度。最後，它也通常以<span> 3D </span>列印線材的形式提供給擠出式<span> 3D </span>印表機，這在原型製作過程中應該會非常有用。</p>
<p><span>4.1.2. </span>零件<span> B </span>和<span> C</span></p>
<p>零件<span> B </span>和<span> C </span>是應該卡入到位並關閉系統的蓋子。這些是非常簡單的零件，需要一定程度的彈性，以便它們可以變形以確保無螺釘組裝。這兩個相同的零件將由熱塑性聚氨酯<span> (TPU) </span>製成，因為它具有彈性和出色的拉伸和撕裂強度。這種聚合物通常用於生產需要類似橡膠彈性的零件。<span>TPU </span>在高溫下表現良好，通常用於電動工具、電纜絕緣和體育用品。最後，<span>TPU </span>也以<span> 3D </span>印表機線材的形式提供，在模擬中將用於原型製作。</p>
<p><span> </span></p>
<p><span>4.1.3. </span>模具</p>
<p>理想情況下，所有模具都應由鋼製成，以延長模具的使用壽命和產品質量。話雖如此，為所有零件選擇的注塑塑膠對壓力的依賴性不高，而且其形狀也不那麼複雜，因此假設使用精密<span> CNC </span>加工製成的鋁模具足以生產所述零件。</p>
<p>還假設所有模具都足夠簡單，可以使用<span> 3D </span>列印進行原型製作。儘管並非總是如此，但它被確定足以代表此模擬。這些原型中使用的材料類型是使用<span> SLA 3D </span>印表機固化的高溫樹脂。此外，在考慮生產過程時，模具將被視為要開發的主要物理方面，因為它是直接影響生產的因素，也是可以在內部生產並像產品一樣進行跟踪的因素。</p>
<p><span>4.2. </span>模擬期間分析的內容</p>
<p>考慮到圖<span> 9 </span>中所示的圖表，以及第<span> 3.1 </span>節中描述的<span> PLM </span>和<span> MES </span>成功集成的主要方面，本實驗旨在就表<span> 1 </span>中以下相關問題提供評論。</p>
<p><span> </span></p>
<ol start="5">
<li><span> </span>章節：<span>ODOO </span>軟體</li>
</ol>
<p><span>5.1. Odoo </span>軟體簡介</p>
<p><span>Odoo </span>是一款商業業務管理軟體，與開源社群有著緊密的聯繫。最初作為開源<span> ERP </span>軟體起步，因其價格合理、直觀的套裝軟體以及在整合和可擴展性方面的優勢而廣受好評。此後，隨著公司經歷快速增長，其商業模式轉變為包含企業付費版本和線上服務。</p>
<p>如<span> 2.2 </span>節所述，現代<span> ERP </span>系統通常是模組化的，就<span> Odoo </span>而言，這種模組化特性尤其明顯，因為社群開發的模組以及公司開發的高度整合的模組提供了大量的擴展。這種可擴展性使得該軟體與<span> PLM+MES </span>集成主題如此相關，因為存在用於<span> PLM </span>的模組以及製造模組中明顯的<span> MES </span>功能。</p>
<p>在本論文的範圍內，目標是將該軟體用於管理前面提到的虛構公司，並得出關於<span> PLM </span>和<span> MES </span>集成在該系統中已經存在的有效性的結論。</p>
<p><span>5.1.1. </span>工作原理</p>
<p>該軟體可以安裝在大多数<span> x86 </span>電腦上，並且支持多種操作系統，包括<span> Windows </span>和所有主要的<span> Linux </span>發行版。</p>
<p>理想情況下，<span>Odoo </span>軟體安裝在一台連接到區域網路的電腦上，並啟動一個<span> SQL </span>資料庫，其中包含業務產生的所有必要信息和文件（圖<span> 16</span>）。該電腦本質上作為伺服器運行，網路中的其他電腦通過瀏覽器訪問。這台電腦可以是專用伺服器或正在使用的桌面電腦，但重要的是要記住，在需要軟體運行的整個時間內，它必須保持開啟和連接狀態。</p>
<p><span> </span></p>
<p>另一個選擇是使用<span> Odoo SA </span>提供的託管服務（圖<span> 17</span>）。在這種情況下，系統將由他們託管，數據將存儲在他們的雲端。這非常適合許多小型企業，尤其是那些特別喜歡與網站相關的模組（用於構建和管理網站和電子商店）的企業。然而，它依賴於網絡，這在某些情況下可能會造成問題。</p>
<p><span> </span></p>
<p>用戶主要通過圖形用戶界面<span> (GUI) </span>與系統交互，並根據每個用戶的需求使用它來訪問不同的可用模組。這意味著可以對不同的用戶應用限制，以便保持對業務活動不同方面的控制，例如，會計人員可以訪問會計模組、銷售模組和庫存模組，但他們將被限制訪問製造模組。這種限制確保只有適當的員工才能控制流程。</p>
<p><span> </span></p>
<p>在所述<span> GUI </span>中，不同的模組顯示為應用程式圖標（圖<span> 18</span>），並且從一開始，公司就可以使用合理選擇的良好集成的應用程式，更不用說充滿社群製作模組的龐大應用商店了。</p>
<p><span> </span></p>
<p><span>5.1.2. Odoo </span>對製造的看法：</p>
<p><span>Odoo </span>認為任何東西的製造責任都分佈在不同的公司部門，每個部門都負責特定的文件類型，並使用特定的應用程式處理（表<span> 2</span>）。從<span> PLM </span>的角度來看，這是非常積極的，因為正如<span> (Saaksvuori and Immonen, 2008) </span>關於用戶權限管理所提到的<span> - PLM </span>系統用於定義信息訪問和維護權限。<span>PLM </span>系統定義了可以創建新信息或進行、檢查和接受更改的人員，以及那些只允許查看系統中信息或文檔的人員。用戶權限管理通常是<span> PLM </span>與其他系統集成時面臨的挑戰。</p>
<p><span> </span></p>
<p>在<span> Odoo </span>看來，任何常規製造過程的第一步都是工程師通常使用<span> CAD </span>軟體設計產品。一旦完成，他們將創建物料清單<span> (BOM)</span>，這是一份生產產品所需的組件或材料清單。此時，重點轉移到製造過程本身。</p>
<p>軟體對流程的看法集中在工藝路線、工作表和工作中心，這是由製造工程團隊完成的。工藝路線是產品生產所經過的一系列步驟。工作表是給製造操作員的說明，工作中心是進行生產的地方。<span>Odoo </span>認為這些是實施工程師計劃的要求。</p>
<p>採購部門將負責請求報價<span> (RFQ) </span>或採購訂單<span> (PO)</span>。庫存操作員根據這些採購訂單處理收貨，通常使用<span> Odoo </span>中的條碼應用程式完成。正如本章第一節所述，<span>Odoo </span>主要是一個<span> ERP </span>系統，在這裡可以注意到一些以<span> ERP </span>為中心的特性，例如對庫存和資源管理的關注。這將在以下部分進一步分析，但公平地指出，那些<span> RFQ </span>和<span> PO </span>被視為數據庫中的項目。</p>
<p>只有當您擁有設計流程和所需的材料時，<span>Odoo </span>才認為可以進行製造。然後，製造主管將創建製造訂單<span> (MO) </span>並通過工作訂單<span> (WO) </span>和工作中心管理製造操作員的計劃。然後，製造操作員可以按照工作訂單開始生產。產品生產後，它們會自動出現在庫存數據庫中，庫存部門會與包裝和交付一起管理。</p>
<p><span>Odoo </span>認為質量團隊負責分配控制<span>/</span>檢查點以及識別產品或生產中可能存在的問題。從<span> MES </span>的角度來看，這些質量控制檢查點非常有趣，因為它們代表了在生產發生時實時收集的寶貴生產數據，即可以在每件產品生產後分配一個尺寸檢查，機械師將填寫尺寸以跟踪隨著時間推移的質量。</p>
<p>如果這是設計問題或有改進的可能性，則可以發出工程變更單<span> (ECO)</span>。這又回到了製造工程團隊手中，他們將專注於更新文檔和<span> BOM</span>。<span>ECO </span>是<span> Odoo </span>處理系統內跟踪變化的核心。這對於<span> PLM </span>來說至關重要，實際上是<span> Odoo </span>應用程式<span> PLM </span>的重點。該應用程式能夠執行到什麼程度是下一節的主題。</p>
<p></p>
<h1>w12任務</h1>
<h2>hw1</h2>
<p><a href="/downloads/零件檔.zip">/downloads/零件檔.zip</a></p>
<p></p>
<p>零件繪製影片</p>
<p><a href="https://youtu.be/3dpD9yNZ7IA?si=Yksuqsz6ZDMOk11p">https://youtu.be/3dpD9yNZ7IA?si=Yksuqsz6ZDMOk11p</a></p>
<p></p>
<p>組合影片</p>
<p><a href="https://youtu.be/LInhkkFguaM?si=5plGPS2wspyzWYST">https://youtu.be/LInhkkFguaM?si=5plGPS2wspyzWYST</a></p>
<p></p>
<h2>hw3</h2>
<p>操作影片</p>
<p><a href="https://youtu.be/2slNuSwqu60?si=qUF24PNC6jquQmBE">https://youtu.be/2slNuSwqu60?si=qUF24PNC6jquQmBE</a></p>
<p></p>
<h1>w13任務</h1>
<p>操作影片</p>
<p>改成3.7.1的方法</p>
<p><a href="https://youtu.be/pGFrn59d0tU?si=ftLnsh0pL6tNgGra">https://youtu.be/pGFrn59d0tU?si=ftLnsh0pL6tNgGra</a></p>
<p></p>
<h1>w14-15任務</h1>
<p>0607完成組合平台</p>
<p><a href="/downloads/0607.ttt">/downloads/0607.ttt</a></p>
<p></p>
<p>使用程式操控平衡台</p>
<p><a href="https://youtu.be/Xay66za1c7w?si=hNYOhGjTK-o77K1g">https://youtu.be/Xay66za1c7w?si=hNYOhGjTK-o77K1g</a></p>
<p></p>
<h1>w17</h1>
<p>項目一</p>
<p><a href="/downloads/061401.prt">/downloads/061401.prt</a></p>
<p><a href="/downloads/061402.prt">/downloads/061402.prt</a></p>
<p><a href="/downloads/061403.prt">/downloads/061403.prt</a></p>
<p>車體繪製影片</p>
<p><a href="https://youtu.be/DGJcMxEAcSw?si=QMAGfVNIfb4nAKd7">https://youtu.be/DGJcMxEAcSw?si=QMAGfVNIfb4nAKd7</a></p>
<p>車輪繪製影片</p>
<p><a href="https://youtu.be/uz0W6PQjLN4?si=eB0LDDL0GhUdSV_p">https://youtu.be/uz0W6PQjLN4?si=eB0LDDL0GhUdSV_p</a></p>
<p>車軸繪製影片</p>
<p><a href="https://youtu.be/-IBtYzoYhQY?si=tB8d3IbaHIN_Xq_X">https://youtu.be/-IBtYzoYhQY?si=tB8d3IbaHIN_Xq_X</a></p>
<p><span> </span></p>
<p>項目二</p>
<p><a href="/downloads/061501.prt">/downloads/061501.prt</a></p>
<p>零件組合影片</p>
<p><a href="https://youtu.be/sxtSrd-GUMY?si=w83XO1DYHOVkFcD5">https://youtu.be/sxtSrd-GUMY?si=w83XO1DYHOVkFcD5</a></p>
<p></p>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>